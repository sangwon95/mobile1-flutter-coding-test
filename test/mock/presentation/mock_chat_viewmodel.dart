// Mocks generated by Mockito 5.4.4 from annotations
// in mobile1_flutter_coding_test/test/layers/presentation/chat/chat_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:flutter/material.dart' as _i2;
import 'package:mobile1_flutter_coding_test/layers/domain/domain.dart' as _i5;
import 'package:mobile1_flutter_coding_test/layers/presentation/chat/chat_viewmodel.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextEditingController_0 extends _i1.SmartFake
    implements _i2.TextEditingController {
  _FakeTextEditingController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChatViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatViewModel extends _i1.Mock implements _i3.ChatViewModel {
  MockChatViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isError => (super.noSuchMethod(
        Invocation.getter(#isError),
        returnValue: false,
      ) as bool);

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  List<_i5.ChatMessage> get chatMessageList => (super.noSuchMethod(
        Invocation.getter(#chatMessageList),
        returnValue: <_i5.ChatMessage>[],
      ) as List<_i5.ChatMessage>);

  @override
  _i2.TextEditingController get chatComposerController => (super.noSuchMethod(
        Invocation.getter(#chatComposerController),
        returnValue: _FakeTextEditingController_0(
          this,
          Invocation.getter(#chatComposerController),
        ),
      ) as _i2.TextEditingController);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  dynamic initRoomId(String? roomId) => super.noSuchMethod(Invocation.method(
        #initRoomId,
        [roomId],
      ));

  @override
  _i6.Future<void> fetchChatMessageList() => (super.noSuchMethod(
        Invocation.method(
          #fetchChatMessageList,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void sendMessage() => super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRetry() => super.noSuchMethod(
        Invocation.method(
          #onRetry,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
